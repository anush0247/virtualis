package com.aakash.vlabs.quiz;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

import android.app.Activity;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.Toast;

public class QuizPreStart extends Activity {

	Button quiz_btn;
	String url = "http://www.cse.iitb.ac.in/~aneesh14/GIFT-examples.txt";
	String[] Questions = {}; 
	String gift_content = "";
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.quiz_pre_start);
		
		quiz_btn = (Button) findViewById(R.id.star_quiz);
		quiz_btn.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View arg0) {
				// TODO Auto-generated method stub
				//Intent quiz_start= new Intent(getApplicationContext(),
				//		QuizStart.class);
				//startActivity(quiz_start);
				try{
					String mystr = getGIFT();
					Toast.makeText(getApplicationContext(), mystr, Toast.LENGTH_LONG).show();
				}catch(Exception e){
					Log.d("Error", e.toString());
					e.printStackTrace();
				}
			}
		});
	}
	
	
	public String getGIFT(){
		//download the gift file contents
		new HttpAsyncTask().execute(url);
		
		/*Thread t = new Thread(){
    		public void run(){
    			gift_content = DownloadFile(url);
    		}
    	};
    	
    	t.start();*/
		//String gift_content = DownloadFile(url);
		
		
		return gift_content;
	}
	
	public String[] parseGIFT(){
		String input = getGIFT();
		// parse the file and return the segments of the questions 
		return null;
	}
	
	/*
	 * To downloading the file and return the gift String
	 */
	
	public String DownloadFile(String path){
		String mystr = "";
		try {
			URL url = new URL(path);
			
			HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
			urlConnection.setRequestMethod("GET");
			urlConnection.setDoOutput(true);
			urlConnection.connect();
			
			InputStream inputStream = urlConnection.getInputStream();
			byte[] buffer = new byte[1024];
			int bufferLength = 0;
			
			StringBuffer buf = new StringBuffer();
			while ( (bufferLength = inputStream.read(buffer)) > 0 ) {
				buf.append(buffer);
			}
			
			mystr = new String(buf);
			
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return mystr;
	}
	
	public static String GET(String url) {
		Log.d("Location", "GET ? " + url );
		InputStream inputStream = null;
		String result = "";
		try {
			// create HttpClient
			HttpClient httpclient = new DefaultHttpClient();
			// make GET request to the given URL
			HttpResponse httpResponse = httpclient.execute(new HttpGet(url));
			// receive response as inputStream
			inputStream = httpResponse.getEntity().getContent();
			// convert inputstream to string
			if (inputStream != null)
				result = convertInputStreamToString(inputStream);
			else
				result = "Did not work!";
		} catch (Exception e) {
			Log.d("InputStream", e.getLocalizedMessage());
			Log.d("Exception", e.toString());
			e.printStackTrace();
		}
		return result;
	}

	private static String convertInputStreamToString(InputStream inputStream)
			throws IOException {
		BufferedReader bufferedReader = new BufferedReader(
				new InputStreamReader(inputStream));
		String line = "";
		String result = "";
		while ((line = bufferedReader.readLine()) != null) {
			if (line.contains("//")) {
			} else {
				line += "\n";
				result += line;
			}
		}
		inputStream.close();
		return result;
	}

	public boolean isConnected() {
		ConnectivityManager connMgr = (ConnectivityManager) getSystemService(Activity.CONNECTIVITY_SERVICE);
		NetworkInfo networkInfo = connMgr.getActiveNetworkInfo();
		if (networkInfo != null && networkInfo.isConnected())
			return true;
		else
			return false;
	}
	
	private class HttpAsyncTask extends AsyncTask<String, Void, String> {
		@Override
		protected String doInBackground(String... urls) {
			return GET(urls[0]);
		}

		@Override
		protected void onPostExecute(String result) {
			// check(result);
		}
	}
	
	
	
	
	
}
